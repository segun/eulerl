-module(largest_product).
-compile(export_all).

largest_product(N) ->
    List = "731671765313306249192251196744265747423553491949349698352031277450632623957831801698480186947885184385861560789112949495459501737958331952853208805511125406987471585238630507156932909632952274430435576689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749303589072962904915604407723907138105158593079608667017242712188399879790879227492190169972088809377665727333001053367881220235421809751254540594752243525849077116705560136048395864467063244157221553975369781797784617406495514929086256932197846862248283972241375657056057490261407972968652414535100474821663704844031998900088952434506585412275886668811642717147992444292823086346567481391912316282458617866458359124566529476545682848912883142607690042242190226710556263211111093705442175069416589604080719840385096245544436298123098787992724428490918884580156166097919133875499200524063689912560717606588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450",

    largest_product(N, List).

largest_product(N, List) ->
    Pos = 1, 
    Max = 0,
    largest_product(Pos, N, List, Max, []).

largest_product(Position, N, List, Max, Adjacents) when Position < (1000 - N) ->
    NewAdjacents = lists:sublist(List, Position, N),
    Product = prod(NewAdjacents, 1),
    if
        Product > Max ->
            largest_product(Position + 1, N, List, Product, NewAdjacents);
        true ->
            largest_product(Position + 1, N, List, Max, Adjacents)
    end;


largest_product(_Position, _N, _List, Max, Adjacents) ->
    {Max, Adjacents}.

prod([], Acc) ->
    Acc;

prod(L, Acc) ->
    Acc2 = list_to_integer((lists:flatten(io_lib:format("~c",[hd(L)])))) * Acc,
    prod(tl(L), Acc2).

